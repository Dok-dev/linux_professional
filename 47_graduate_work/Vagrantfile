# -*- mode: ruby -*-
# vim: set ft=ruby :

home = ENV['HOME']
# ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :inetRouter => {
        :box_name => "centos/7",
        :vm_name => "inetRouter",
        :cpus => "1",
        :mem => "256",
        #:public => {:ip => '10.10.10.1', :adapter => 1},
        :net => [
                   {ip: '10.10.255.1', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
                   {ip: '192.168.59.2', adapter: 8},
                ]
  },

  :LoadBalancer => {
        :box_name => "centos/7",
        :vm_name => "router-lb",
        :cpus => "1",
        :mem => "256",
        :net => [
                   {ip: '10.10.255.2', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
                   {ip: '172.16.1.1', adapter: 3, netmask: "255.255.255.248", virtualbox__intnet: "front-net"},
                   {ip: '192.168.2.1', adapter: 4, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
                   {ip: '192.168.60.3', adapter: 8},
                ]
  },
  
  :frontNode1 => {
        :box_name => "ubuntu/focal64",
        :vm_name => "front-node1",
        :cpus => "2",
        :mem => "1024",
        :net => [
                   {ip: '172.16.1.2', adapter: 2, netmask: "255.255.255.248", virtualbox__intnet: "front-net"},
                   {ip: '192.168.60.11', adapter: 8},
                ]
  },

  :frontNode2 => {
        :cpus => "2",
        :mem => "1024",
        :box_name => "ubuntu/focal64",
        :vm_name => "front-node2",
        :net => [
                   {ip: '172.16.1.4', adapter: 2, netmask: "255.255.255.248", virtualbox__intnet: "front-net"},
                   {ip: '192.168.60.12', adapter: 8},
                ]
  },

  :backNode1 => {
        :cpus => "2",
        :mem => "2048",
        :box_name => "centos/stream8",
        :vm_name => "back-node1",
        :net => [
                   {ip: '192.168.2.4', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
                   {ip: '192.168.60.21', adapter: 8},
                ],
        :disks => {
          :sata1 => {
            :dfile => home + '/VirtualBox VMs/node1_sata1.vdi',
            :size => 2048, # Megabytes
            :port => 1
          },
          :sata2 => {
            :dfile => home + '/VirtualBox VMs/node1_sata2.vdi',
            :size => 10240,
            :port => 2
          }
        }
  },

  :backNode2 => {
        :cpus => "2",
        :mem => "2048",
        :box_name => "centos/stream8",
        :vm_name => "back-node2",
        :net => [
                   {ip: '192.168.2.6', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
                   {ip: '192.168.60.22', adapter: 8},
                ],
        :disks => {
          :sata1 => {
            :dfile => home + '/VirtualBox VMs/node2_sata1.vdi',
            :size => 2048,
            :port => 1
          },
          :sata2 => {
            :dfile => home + '/VirtualBox VMs/node2_sata2.vdi',
            :size => 10240,
            :port => 2
          }
        }
  },

  :Monitoring => {
        :cpus => "2",
        :mem => "1024",
        :box_name => "centos/7",
        :vm_name => "monitoring",
        :net => [
                   {ip: '192.168.2.11', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
                   {ip: '192.168.60.31', adapter: 8},
                ]
  },

  :rsyslog => {
    :cpus => "2",
    :mem => "1024",
    :box_name => "centos/7",
    :vm_name => "rsyslog",
    :net => [
               {ip: '192.168.2.12', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
               {ip: '192.168.60.32', adapter: 8},
            ]
  },

  :Backup => {
    :cpus => "1",
    :mem => "512",
        :box_name => "centos/stream8",
        :vm_name => "backup",
        :net => [
                   {ip: '192.168.2.13', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "back-net"},
                   {ip: '192.168.60.33', adapter: 8},
                ]
  }
}

Vagrant.configure("2") do |config|

  MACHINES.each_with_index do |(boxname, boxconfig), index|

    config.vm.synced_folder ".", "/vagrant", id: "vagrant", automount: true # mount local folder as /vagrant
    config.vm.define boxname do |box|

      box.vm.box = boxconfig[:box_name]

      box.vm.host_name = boxconfig[:vm_name]

      box.vm.provider "virtualbox" do |vm|
        vm.memory = boxconfig[:mem]
        vm.cpus = boxconfig[:cpus]
        # Set name for vm in Virtual Box
        vm.name = boxname.to_s
      end

      boxconfig[:net].each do |ipconf|
        box.vm.network "private_network", ipconf
      end
      
      if boxconfig.key?(:public)
        box.vm.network "public_network", boxconfig[:public]
      end

      case boxname.to_s

      when "Monitoring"
        box.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1", id: "grafana"

      when "EFK"
        box.vm.network "forwarded_port", guest: 5601, host: 5601, host_ip: "127.0.0.1", id: "grafana"

      when "backNode1", "backNode2"
        box.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", "2048"]
          needsController = false
        boxconfig[:disks].each do |dname, dconf|
            unless File.exist?(dconf[:dfile])
              vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                needsController =  true
              end
            end
            if needsController == true
              vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
              boxconfig[:disks].each do |dname, dconf|
                  vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
              end
            end
        end
      end

      if index == MACHINES.size - 1
        box.vm.provision 'ansible' do |ansible|
        ansible.inventory_path = "ansible/inventory.yml"
        ansible.playbook = 'ansible/provision.yml'
        ansible.limit = 'all'
        ansible.galaxy_roles_path = "ansible/roles"
        ansible.galaxy_command = 'ansible-galaxy collection install community.general community.postgresql'
        # ansible.verbose = "vvv"
        ansible.raw_ssh_args = ['-o KbdInteractiveAuthentication=yes',
                                '-o GlobalKnownHostsFile=/dev/null',
                                '-o UserKnownHostsFile=/dev/null',
                                '-o StrictHostKeyChecking=no',
                                '-o ServerAliveInterval=30']
        end
      end

    end

  end
  

end
