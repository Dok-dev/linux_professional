# -*- mode: ruby -*-
# vim: set ft=ruby :

linux_nodes = {
  "repo" => { :ip => "192.168.60.10", :cpus => "2", :mem => "2048" }
}

Vagrant.configure("2") do |config|
    config.vm.box = "centos/7"
    # config.vm.box_version = "2011.0"
    linux_nodes.each_with_index do |(hostname, cfg), index|
        config.vm.define hostname do |node|
            # Set hostname for host
            node.vm.hostname = hostname
            node.vm.provider "virtualbox" do |v|
                v.memory = cfg[:mem]
                v.cpus = cfg[:cpus]
                # Set name for vm in Virtual Box
                v.name = hostname
            end
            # configure VMs network
            node.vm.network :"private_network",
            virtualbox__intnet: "net1",
            ip: cfg[:ip],
            :virtualbox__dhcp_enabled => false,
            :virtualbox__forward_mode => "nat",
            :virtualbox__netmask => "255.255.255.0",
            :virtualbox__gateway => "192.168.60.1"
            node.vm.network "forwarded_port", guest: 80, host: 8080
            node.vm.provision "shell", inline: <<-SHELL
            yum makecache --refresh
            yum install -y \
            redhat-lsb-core \
            rpmdevtools \
            rpm-build \
            createrepo \
            yum-utils \
            gcc

            ###################### Создать свой RPM ######################
            # Скачаем распакуем ngix и openssl:
            curl -L https://nginx.org/packages/centos/8/SRPMS/nginx-1.20.2-1.el8.ngx.src.rpm --output nginx-1.20.2-1.el8.ngx.src.rpm
            rpm -i nginx-1.*
            curl -L https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1s/openssl-1.1.1s.tar.gz --output openssl-1.1.1s.tar.gz
            tar -C "/root" -xvf openssl-1.1.1s.tar.gz

            # Установим пакет с сырцами:
            yum localinstall -y /root/rpmbuild/RPMS/x86_64/nginx-1.20.2-1.el7.ngx.x86_64.rpm 

            # Заранее поставим все зависимости чтобы в процессе сборки не было ошибок:rpmbuild -tsappa
            yum-builddep -y /root/rpmbuild/SPECS/nginx.spec

            # Добавим в speck-файле опцию для сборки с openssl:
            sed -i 's/--with-debug/--with-openssl=\/root\/openssl-1.1.1s --with-debug/' /root/rpmbuild/SPECS/nginx.spec

            # Теперь можно приступить к сборке RPM пакета:
            rpmbuild -bb /root/rpmbuild/SPECS/nginx.spec
            ls -lh /root/rpmbuild/RPMS/x86_64/

            # Теперь можно установить наш пакет и убедиться что nginx работает:
            yum localinstall -y /root/rpmbuild/RPMS/x86_64/nginx-1.20.2-1.el7.ngx.x86_64.rpm
            systemctl start nginx
            systemctl status nginx

            ######################## Создать свой репо и разместить там свой RPM ######################
            # Директория для статики у NGINX по умолчанию /usr/share/nginx/html. Создадим там каталог repo и скопируем туда RPM-пакет:
            mkdir /usr/share/nginx/html/repo
            cp /root/rpmbuild/RPMS/x86_64/nginx-1.20.2-1.el7.ngx.x86_64.rpm /usr/share/nginx/html/repo/

            # Скопируем туда RPM-пакет для установки репозиторий Percona-Server:
            curl -L https://downloads.percona.com/downloads/percona-distribution-mysql-ps/percona-distribution-mysql-ps-8.0.28/binary/redhat/7/x86_64/percona-orchestrator-3.2.6-2.el7.x86_64.rpm --output /usr/share/nginx/html/repo/percona-orchestrator-3.2.6-2.el7.x86_64.rpm

            # Инициализируем репозиторий командой:
            createrepo /usr/share/nginx/html/repo/

            # Для прозрачности настроим в NGINX доступ к листингу каталога:
            sed -i 's/index  index.html index.htm;/index  index.html index.htm;autoindex on;/' /etc/nginx/conf.d/default.conf

            # Проверяем конфиг и применяем его:
            nginx -t && nginx -s reload
            sleep 3s

            # Проверка:
            curl -a http://localhost/repo/

            # Добавим наш репозиторий в /etc/yum.repos.d:
            cat >> /etc/yum.repos.d/otus.repo << EOF
[otus]
name=otus-linux
baseurl=http://localhost/repo
gpgcheck=0
enabled=1
EOF

            # Убедимся что репозиторий подключился и посмотрим что в нем есть:
            yum repolist enabled | grep otus
            yum list | grep otus

            # Установим percona-orchestrator из нашего репозитория, но сначала устраним проблему с зависимостями
            yum install epel-release -y
            yum install jq oniguruma -y
            yum install percona-orchestrator.x86_64 -y
            SHELL
        end 
    end
end